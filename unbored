#!/usr/bin/env python
"""A simple terminal-based client for the Bored API.

http://www.boredapi.com/
"""

######################################################################
# Main app information.
__author__     = "Dave Pearson"
__copyright__  = "Copyright 2022, Dave Pearson"
__credits__    = [ "Dave Pearson" ]
__maintainer__ = "Dave Pearson"
__email__      = "davep@davep.org"
__version__    = "0.0.1"
__licence__    = "GPLv3+"

##############################################################################
# Python imports.
from datetime    import datetime
from typing      import Callable, Any, TypeVar, Final, cast
from pathlib     import Path
from json        import dumps, loads, JSONEncoder
from dataclasses import is_dataclass, asdict
from webbrowser  import open as open_url

##############################################################################
# BoredAPI imports.
from bored_api import BoredClient, BoredActivity, ActivityType, BoredException

##############################################################################
# XDG imports.
from xdg import xdg_data_home

##############################################################################
# Textual imports.
from textual.app        import App, ComposeResult, RenderResult
from textual.screen     import Screen
from textual.widget     import Widget
from textual.containers import Container, Horizontal, Vertical
from textual.widgets    import Header, Footer, Button, Static, Label, Input
from textual.binding    import Binding
from textual.message    import Message

##############################################################################
# Rich imports
from rich.text import Text

##############################################################################
class ActivityEncoder( JSONEncoder ):
    """JSON encoder that understands about activities."""

    def default( self, o: object ) -> Any:
        """Handle unknown values."""
        if is_dataclass( o ):
            return asdict( o )
        if isinstance( o, ActivityType ):
            return o.value
        if isinstance( o, datetime ):
            return o.isoformat()
        return super().default( o )

##############################################################################
class WebLink( Button ):
    """A button that links to a URL."""

    def __init__( self, link: str ) -> None:
        """Initialise the link button."""
        self._link = link
        super().__init__( Text.from_markup( ":link:" ), variant="primary" )

    def visit( self ) -> None:
        """Visit the URL for the link."""
        open_url( self._link )

##############################################################################
def focus_within( widget: Widget ) -> bool:
    """Is focus somewhere within the given widget?

    Args:
        widget (Widget): The widget to test.

    Returns:
        bool: `True` if focus is within the widget, otherwise `False`.
    """
    return bool( widget.query( "*:focus-within" ) )

##############################################################################
class Activity( Widget ):
    """A widget that holds and displays a suggested activity."""

    BINDINGS = [
        Binding( "d", "delete", "Delete" ),
        Binding( "up", "move_up", "Move Up" ),
        Binding( "down", "move_down", "Move Down" ),
        Binding( "escape", "deselect", "Switch to Types" )
    ]
    """Bindings for the widget."""

    def __init__( self, activity: BoredActivity, chosen_at: datetime | None = None ):
        """Initialise the activity widget.

        Args:
            activity (BoredActivity): The activity to display.
            chosen_at (datetime | None, optional): the time the activity was chosen.
        """
        super().__init__()
        self.activity  = activity
        self.chosen_at = datetime.now() if chosen_at is None else chosen_at

    @property
    def as_dict( self ) -> dict[ str, Any ]:
        """dict[ str, Any]: The activity as a dictionary."""
        return asdict( self.activity ) | { "chosen_at": self.chosen_at }

    @staticmethod
    def from_dict( activity: dict[ str, Any ] ) -> "Activity":
        """Create a new activity from the given dictionary.

        Args:
            activity (dict[ str, Any]): The dictionary to load data from.

        Returns:
            Activity: An activity widget created from the data.
        """
        chosen_at = datetime.fromisoformat( activity[ "chosen_at" ] )
        del activity[ "chosen_at" ]
        return Activity( BoredActivity( **activity ), chosen_at )

    @property
    def is_first( self ) -> bool:
        """bool: Is this the first activity in the activity list?"""
        return self.parent is not None and self.parent.children[ 0 ] == self

    @property
    def is_last( self ) -> bool:
        """bool: Is this the last activity in the activity list?"""
        return self.parent is not None and self.parent.children[ -1 ] == self

    class Moved( Message ):
        """A message to indicate that an activity has moved."""

    def action_move_up( self ) -> None:
        """Move this activity up one place in the list."""
        if self.parent is not None and not self.is_first:
            parent = cast( Widget, self.parent )
            parent.move_child(
                self, before=parent.children.index( self ) - 1
            )
            self.emit_no_wait( self.Moved( self ) )
            self.scroll_visible( top=True )

    def action_move_down( self ) -> None:
        """Move this activity up down place in the list."""
        if self.parent is not None and not self.is_last:
            cast( Widget, self.parent ).move_child(
                self, after=self.parent.children.index( self ) + 1
            )
            self.emit_no_wait( self.Moved( self ) )
            self.scroll_visible( top=True )

    def compose( self ) -> ComposeResult:
        """Compose the activity.

        Returns:
            ComposeResult: The layout for the main screen.
        """
        yield Static( self.chosen_at.strftime( '%c' ), classes="timestamp" )
        yield Static(
            f"[b]{self.activity.activity}[/b]\n\n"
            f"It's considered to have an accessibility of score of {self.activity.accessibility}"
            " (0 being the most accessible; 1 being the least), "
            f"is a {self.activity.type.value} type of activity, "
            + (
                f"requires {self.activity.participants} participants "
                if self.activity.participants > 1 else ""
            ) +
            f"and has a price score of {self.activity.price} (0 being free)."
        )
        yield Horizontal(
            Button(
                Text.from_markup( ":up_arrow:" ),
                id="up", classes="mover", variant="primary"
            ),
            Button(
                Text.from_markup( ":down_arrow:" ),
                id="down", classes="mover", variant="primary"
            ),
            *( [ WebLink( link=self.activity.link ) ] if self.activity.link else [] ),
            Button( Text.from_markup( ":cross_mark:" ), id="delete", variant="primary" ),
            classes="buttons"
        )

    class Dropped( Message ):
        """A message to indicate that an activity was dropped."""

    async def drop_activity( self ) -> None:
        """Drop the current activity, letting the parent know we're doing so."""
        # This seems to work, I can't make this fail, but I'm not 100%
        # convinced by this. I want the parent to know that I'm being
        # removed, and I want to remove. I want the parent to know I've been
        # removed *after* I've been removed because it will want to save the
        # list and I should be missing from it. That would suggest the
        # remove comes first then the message send follows, but Textual gets
        # very upset (for reasons that seem to make sense) if I do that.
        #
        # So here I am, sending the message and *then* removing and... it
        # seems to work and I don't know why if I'm honest.
        await self.emit( self.Dropped( self ) )
        await self.remove()

    async def on_button_pressed( self, event: Button.Pressed ) -> None:
        """React to a button being pressed on the widget."""
        event.stop()
        if event.button.id == "delete":
            await self.drop_activity()
        elif event.button.id == "up":
            self.action_move_up()
        elif event.button.id == "down":
            self.action_move_down()
        elif isinstance( event.button, WebLink ):
            event.button.visit()

    async def action_delete( self ) -> None:
        """Delete action; removes this activity."""
        await self.drop_activity()

    def on_mouse_down( self, _ ) -> None:
        """React to the mouse button going down within us."""
        if not focus_within( self ):
            self.query( Button ).first().focus()
            self.scroll_visible()

    class Deselect( Message ):
        """Message to send when a user wants to deselect an action."""

    def action_deselect( self ) -> None:
        """Message the parent that we want to give up focus."""
        self.emit_no_wait( self.Deselect( self ) )

##############################################################################
class FilterInput( Input ):
    """A numeric filter input widget."""

    CAST: Callable[ [ Any ], Any ] = str
    """Callable[ [ Any ], Any ]: The casting function.

    Note: It is expected that a `ValueError` will be raised if there is a
    problem with the value.
    """

    def __init__( self, *args: Any, **kwargs: Any ) -> None:
        """Initialise the input."""
        super().__init__( *args, **kwargs )
        # TODO: Workaround for https://github.com/Textualize/textual/issues/1216
        self.value = self.validate_value( self.value )

    def validate_value( self, value: str ) -> str:
        """Validate the input.

        Args:
            value (str): The value to validate.

        Returns:
            str: The acceptable value.
        """
        # If the input field isn't empty...
        if value.strip():
            try:
                # ...run it through the casting function. We don't care
                # about what comes out of the other end, we just case that
                # it makes it through at all.
                _ = self.CAST( value )
            except ValueError:
                # It's expected that the casting function will throw a
                # ValueError if there's a problem with the conversion (see
                # int and float for example) so, here we are. Make a
                # noise...
                self.app.bell()
                # ...and return what's in the input now because we're
                # rejecting the new value.
                return self.value
        # The value to test is either empty, or valid. Let's accept it.
        return value

    class Blur( Message ):
        """Message sent to the parent when focus is lost."""

    def on_blur( self ):
        """Handle losing focus."""
        self.emit_no_wait( self.Blur( self ) )

##############################################################################
class IntInput( FilterInput ):
    """An input widget that only accepts integer float values."""

    CAST = int

##############################################################################
class FloatInput( FilterInput ):
    """An input widget that only accepts (most) float values."""

    CAST = float

TClamp = TypeVar( "TClamp", int, float )
"""A clampable type."""

##############################################################################
class Filters( Vertical ):
    """Filtering sidebar."""

    BINDINGS = [
        Binding( "escape", "close", "Close Filters" )
    ]
    """The bindings for the filter pop-over."""

    def compose( self ) -> ComposeResult:
        """Compose the filter panel.

        Returns:
            ComposeResult: The layout for the filters panel.
        """
        yield Label( "Filters", classes="h1" )
        yield Label( "Participants:", classes="h2" )
        yield IntInput( id="participants", placeholder="Number of participants" )
        yield Label( "Minimum Price:", classes="h2" )
        yield FloatInput( id="min_price", placeholder="Between 0 (free) and 1 (expensive)" )
        yield Label( "Maximum Price:", classes="h2" )
        yield FloatInput( id="max_price", placeholder="Between 0 (free) and 1 (expensive)" )
        yield Label( "Minimum Accessibility:", classes="h2" )
        yield FloatInput( id="min_accessibility", placeholder="Between 0 (most) and 1 (least)" )
        yield Label( "Maximum Accessibility:", classes="h2" )
        yield FloatInput( id="max_accessibility", placeholder="Between 0 (most) and 1 (least)" )

    def on_filter_input_blur( self, _: FilterInput.Blur ):
        """Watch and handle focus changes in the inputs."""
        # If focus moved outside of our inputs...
        if not focus_within( self ):
            # ...auto-close.
            self.hide()

    def on_mount( self ) -> None:
        """Configure the filters once we're composed."""
        self.hide()

    @property
    def participants( self ) -> int | None:
        """int | None: The participants filter value.

        If the user appears to have provided a value, it will be an integer.
        If there is no given value or it doesn't look this will be `None`.
        """
        try:
            if ( value := int( self.query_one( "#participants", IntInput ).value.strip() ) ) > 0:
                return value
        except ValueError:
            pass
        return None

    @staticmethod
    def clamp( value: TClamp | None, min_val : TClamp, max_val: TClamp ) -> TClamp | None:
        """Clamp a value.

        Args:
            value (TClamp | None): The value to clamp.
            min_val (TClamp): The minimum value.
            max_val (TClamp): The maximum value.

        Returns:
            TClamp | None: The clamped value.

        Note:
            If the value is `None`, then `None` will be returned.
        """
        if value is None:
            return value
        if value < min_val:
            return min_val
        if value > max_val:
            return max_val
        return value

    def _min_max_value( self, value: str ) -> tuple[ float | None, float | None ]:
        """Get a min/max float value from the filters.

        Args:
            value (str): The name of the filter value to get.

        Returns:
            tuple[ float | None, float | None ]: The filter value.
        """
        def _value( which: str ) -> float | None:
            try:
                if ( price := float(
                        self.query_one( f"#{which}_{value}", FloatInput ).value.strip()
                ) ) <= 0:
                    price = None
            except ValueError:
                price = None
            return price

        # Get the filter values.
        min_value = self.clamp( _value( "min" ), 0, 1 )
        max_value = self.clamp( _value( "max" ), 0, 1 )

        # Let's be nicer to a confused user, I guess.
        if min_value is not None and max_value is not None and max_value < min_value:
            return max_value, min_value

        # Finally, return what we've got.
        return min_value, max_value

    @property
    def price( self ) -> tuple[ float | None, float | None ]:
        """tuple[ float | None, float | None ]: The price filter.

        A tuple of minimum and maximum price filters. If no filter value was
        provided for either of the values then they will be `None`.
        """
        return self._min_max_value( "price" )

    @property
    def accessibility( self ) -> tuple[ float | None, float | None ]:
        """tuple[ float | None, float | None ]: The accessibility filter.

        A tuple of minimum and maximum accessibility filters. If no filter
        value was provided for either of the values then they will be
        `None`.
        """
        return self._min_max_value( "accessibility" )

    def action_close( self ):
        """Close action for the filters."""
        self.hide()

    def show( self ) -> None:
        """Show the filter options."""
        for field in self.query( Input ):
            field.can_focus = True
        self.query( Input ).first().focus()
        self.remove_class( "hidden" )

    def hide( self ) -> None:
        """Hide the filter options."""
        self.add_class( "hidden" )
        self.screen.query_one( "#any", Button ).focus()
        for field in self.query( Input ):
            field.can_focus = False

    @property
    def shown( self ) -> bool:
        """bool: Are the filters currently shown?"""
        return not self.has_class( "hidden" )

##############################################################################
class TypeChoices( Container ):
    """Container widget for the type choices buttons."""

    def compose( self ) -> ComposeResult:
        """Compose the type choices button collection.

        Returns:
            ComposeResult: The layout for the type choice buttons.
        """
        yield Button( "Any", id="any" )
        yield from ( Button(
            activity.value.capitalize(), id=activity.value
        ) for activity in ActivityType )

##############################################################################
class NoMatchingActivities( Label ):
    """The no-matches-found error message."""

    def __init__( self ) -> None:
        """Initialise the no-matches warning."""
        super().__init__( classes="hidden" )

    def render( self ) -> RenderResult:
        """Render the no-match message.

        Returns:
            RenerResult: The content of the error message.
        """
        return "Unable to find any activities that satisfy the current filters."

    def show( self ) -> None:
        """Show the warning message."""
        self.remove_class( "hidden" )
        self.set_timer( 2, self.hide )

    def hide( self ) -> None:
        """Hide the warning message."""
        self.add_class( "hidden" )

##############################################################################
class Main( Screen ):
    """The main application screen."""

    BINDINGS = [
        Binding( "f", "filters", "Filters" ),
        Binding( "escape", "quit", "Close" )
    ]
    """The bindings for the main screen."""

    def compose( self ) -> ComposeResult:
        """Compose the main screen.

        Returns:
            ComposeResult: The layout for the main screen.
        """
        yield Header()
        self.activities = Vertical( id="activities" )
        yield Vertical( TypeChoices(), self.activities )
        yield Footer()
        self.filters = Filters( classes="hidden" )
        yield self.filters
        yield NoMatchingActivities()

    def on_mount( self ) -> None:
        """Set up the screen on mount."""
        self.api = BoredClient()
        self.set_focus( self.query_one( "#any", Button ) )
        self.load_activity_list()

    ACTIVITY_FILE: Final = Path( "unbored.json" )
    """Path: The name of the file that the list it saved to."""

    @property
    def data_file( self ) -> Path:
        """Path: The full path to the file for saving the data.

        Note:
            As a side effect of access the directory will be crated if it
            doesn't exist.
        """
        ( save_to := xdg_data_home() / "unbored" ).mkdir( parents=True, exist_ok=True )
        return save_to / self.ACTIVITY_FILE

    def save_activity_list( self ) -> None:
        """Save the activity list to disk."""
        self.data_file.write_text( dumps(
            [ activity.as_dict for activity in self.activities.query( Activity ) ],
            cls=ActivityEncoder, indent=4
        ) )

    def load_activity_list( self ) -> None:
        """Load the activity list from disk."""
        if self.data_file.exists():
            to_mount: list[ Activity ] = []
            for activity in loads( self.data_file.read_text() ):
                activity[ "type" ] = ActivityType( activity[ "type" ] )
                to_mount.append( Activity.from_dict( activity ) )
            if to_mount:
                self.activities.mount( *to_mount )

    async def on_button_pressed( self, event: Button.Pressed ) -> None:
        """Handle the button press."""

        # We're going to build up a collection of options to dictate the
        # choice made.
        options: dict[ str, int | float | str ] = {}

        # If the button wasn't the any button, it'll have been one of the
        # activity type buttons. The filter value is in the button ID.
        if event.button.id is not None and event.button.id != "any":
            options[ "type" ] = event.button.id

        # If it looks like we've got a participants filter...
        if ( participants := self.filters.participants ) is not None:
            # ...add that.
            options[ "participants" ] = participants

        # See if we should apply price filtering.
        min_price, max_price = self.filters.price
        if min_price is not None:
            options[ "min_price" ] = min_price
        if max_price is not None:
            options[ "max_price" ] = max_price

        # See if we should apply accessibility filtering.
        min_accessibility, max_accessibility = self.filters.accessibility
        if min_accessibility is not None:
            options[ "min_accessibility" ] = min_accessibility
        if max_accessibility is not None:
            options[ "max_accessibility" ] = max_accessibility

        # Get the new activity.
        try:
            self.activities.mount(
                Activity( await self.api.get( **options ) ), before=0
            )
            self.save_activity_list()
        except BoredException:
            self.query_one( NoMatchingActivities ).show()

    def action_filters( self ) -> None:
        """Toggle the display of the filters."""
        if self.filters.shown:
            self.filters.hide()
        else:
            self.filters.show()

    def on_activity_moved( self, _: Activity.Moved ) -> None:
        """React to an activity being moved."""
        self.save_activity_list()

    def on_activity_dropped( self, _: Activity.Dropped ) -> None:
        """React to an activity being dropped."""
        self.save_activity_list()

    def on_activity_deselect( self ):
        """Handle an activity wanting to give up focus."""
        self.set_focus( self.query_one( "#any", Button ) )

##############################################################################
class Unbored( App[ None ] ):
    """The main application class."""

    CSS_PATH = "unbored.css"
    """The name of the CSS file for the application."""

    TITLE = f"Unbored - v{__version__}"
    """The title of the application."""

    SCREENS = {
        "main": Main
    }
    """The collection of application screens."""

    def on_mount( self ) -> None:
        """Set up the application on startup."""
        self.push_screen( "main" )

##############################################################################
# Main entry point.
if __name__ == "__main__":
    Unbored().run()

### unbored ends here
